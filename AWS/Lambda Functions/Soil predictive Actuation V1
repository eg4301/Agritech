import boto3
import requests
import json
from boto3.dynamodb.conditions import Key
from decimal import Decimal


region = 'us-east-2' 

MaxTable = 'ActuationMax-7jdwgyuaa5fqdhfq2qrgneob2i-production'
MinTable = 'ActuationMin-7jdwgyuaa5fqdhfq2qrgneob2i-production'
TempTable = 'Temporary_Storage_RAC'

# Creating the DynamoDB Table Resource
dynamodb = boto3.resource('dynamodb', region_name="us-east-2")
tableMax = dynamodb.Table(MaxTable)
tableMin = dynamodb.Table(MinTable)
tabletemp = dynamodb.Table(TempTable)

Conditem = tableMax.get_item(
    Key={
        'Setup': 'Soil 1',
        'Variable': 'conductivity'
    }
)
Conditem2 = tableMin.get_item(
    Key={
        'Setup': 'Soil 1',
        'Variable': 'conductivity'
    }
)
CondMax = (Conditem['Item']['Max'])
CondMin = (Conditem2['Item']['Min'])
CondPesudoMax = (Conditem['Item']['PesudoMax'])
CondPesudoMin = (Conditem2['Item']['PesudoMin'])
CondHalf = (CondMax - CondMin)/2
CondMid = (CondMax + CondMin)/2

pHitem = tableMax.get_item(
    Key={
        'Setup': 'Soil 1',
        'Variable': 'pH'
    }
)
pHitem2 = tableMin.get_item(
    Key={
        'Setup': 'Soil 1',
        'Variable': 'pH'
    }
)

pHMax = (pHitem['Item']['Max'])
pHMin = (pHitem2['Item']['Min'])
pHPesudoMax = (pHitem['Item']['PesudoMax'])
pHPesudoMin = (pHitem2['Item']['PesudoMin'])
pHMid = (pHMax + pHMin)/2
pHHalf = (pHMax - pHMin)/2
    
moistureitem = tableMax.get_item(
    Key={
        'Setup': 'Soil 1',
        'Variable': 'moisture'
    }
)
moistureitem2 = tableMin.get_item(
    Key={
        'Setup': 'Soil 1',
        'Variable': 'moisture'
    }
)
moistureMax = (moistureitem['Item']['Max'])
moistureMin = (moistureitem2['Item']['Min'])
moisturePesudoMax = (moistureitem['Item']['PesudoMax'])
moisturePesudoMin = (moistureitem2['Item']['PesudoMin'])
moistureHalf = (moistureMax - moistureMin)/2
moistureMid = (moistureMax + moistureMin)/2

pHDecreasingitem = tabletemp.get_item(
    Key={
        'MAC': 1,
        'timestamp': '2'
    }
)
pHDecreasingRate = (pHDecreasingitem['Item']['average_decrease'])

if pHDecreasingRate > pHHalf:
    pHCalMin = pHMid
else:
    pHCalMin = pHMin + pHDecreasingRate*Decimal('1.2')

CondDecreasingitem = tabletemp.get_item(
    Key={
        'MAC': 1,
        'timestamp': '1'
    }
)
CondDecreasingRate = (CondDecreasingitem['Item']['average_decrease'])

if CondDecreasingRate > CondHalf:
    CondCalMin = CondMid
else:
    CondCalMin = CondMin + CondDecreasingRate*Decimal('1.2')

MoistDecreasingitem = tabletemp.get_item(
    Key={
        'MAC': 1,
        'timestamp': '3'
    }
)
MoistDecreasingRate = (MoistDecreasingitem['Item']['average_decrease'])

if MoistDecreasingRate > MoistHalf:
    MoistCalMin = MoistMid
else:
    MoistCalMin = MoistMin + MoistDecreasingRate*Decimal('1.2')
    
if pHPesudoMin == 1000000:
    pHPesudoMin = pHCalMin
else:
    pHPesudoMin = pHPesudoMin
if CondPesudoMin == 1000000:
    CondPesudoMin = CondCalMin
else:
    CondPesudoMin = CondPesudoMin
    

def lambda_handler(event, context):
    for record in event['Records']:
        MAC = record['dynamodb']['NewImage']['MAC']['N']
        timestamp = record['dynamodb']['NewImage']['timestamp']['S']
        conductivity = Decimal(record['dynamodb']['NewImage']['conductivity']['N'])
        pH = Decimal(record['dynamodb']['NewImage']['pH']['N'])
        moisture = Decimal(record['dynamodb']['NewImage']['moisture']['N'])
        
    cond_diff, cond_target = get_diff_target(conductivity, CondMin, CondMax,CondPesudoMin,CondPesudoMax)
    pH_diff, pH_target = get_diff_target(pH, pHMin, pHMax,pHPesudoMin,pHPesudoMax)
    moisture_diff, moisture_target = get_diff_target(moisture, moistureMin, moistureMax, moisturePesudoMin, moisturePesudoMax)
    
    client = boto3.client('iot-data', region_name='us-east-2')
    response = client.publish(
        topic='esp32/sub',
        qos=1,
        payload=json.dumps({
            "MAC": MAC,
            "Timestamp": timestamp,
            "pH": pH_target,
            "conductivity": cond_target,
            "moisture": moisture_target
        })
    )
    return response

def get_diff_target(value, min_val, max_val, PesudoMin, PesudoMax):
    if value < min_val and value != 0:
        msg = "below minimum thresholds"
        diff = float(min_val - value)  # Convert Decimal to float
        act = float(PesudoMax)
    elif min_val < value < PesudoMin and value != 0:
        msg = "still within thresholds but requires actuation"
        diff = float(PesudoMin - value)  # Convert Decimal to float
        act = float(PesudoMax)
    elif value > max_val and value != 0:
        msg = "above maximum thresholds"
        diff = float(value - max_val)  # Convert Decimal to float
        act = float(PesudoMax + PesudoMin) / 2
    elif PesudoMax < value < max_val and value != 0:
        msg = "warning, variable is approaching maximum thresholds"
        diff = float(max_val - value)  # Convert Decimal to float
        act = float(PesudoMax + PesudoMin) / 2
    elif PesudoMin < value < PesudoMax and value != 0:
        msg = "normal readings, no actions required"
        diff = float(max_val - value)
        act = "NA"
    else:
        msg = "NA"
        diff = "NA"
        act = "NA"
    return diff, act
